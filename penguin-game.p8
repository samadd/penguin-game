pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

function player_input()
  return {left = btn(0), right = btn(1), up = btn(2), down = btn(3), fire1 = btn(4), fire2 = btn(5)}
end

function simple_mover_input(b)
  if b.vx > 0 then
    return {right = true}
  else
    return {left = true}
  end
end

function restricted_mover_input(x,y,d)
  return function(b)
    if b.vx > 0 then
      if b.x < x + d then return {right = true} else return {left = true} end
    else
      if b.x > x - d then return {left = true} else return {right = true} end
    end
  end
end

function make_baddie(x, y, bg, inp)
  local b = {x = x, y = y, health = bg.health, height = bg.height, width=bg.width, vx = 0, vy = 0, accx = bg.accx, maxvx = bg.maxvx}
  b.bounds = bg.bounds
  b.states = bg.states
  b.state = bg.states.idle
  b.sprite = b.state[1]
  b.tick = 0
  b.flip = false
  b.update = function()
    local ip = inp(b)
    for f in all(bg.updaters) do
      f(b, ip)
    end
  end
  return b
end

function make_penguin(x, y, lives, input_func)
  local p = {x = x, y = y, lives = lives}
  p.states = {idle = {0}, walking = {0,32,32,32,0,0,0,34,34,34,0,0}, jumping={0,2,2,2,4,4,4,0,0}}
  p.width = 2
  p.height = 2
  p.bounds = {3,11,2,15}
  p.vx = 0
  p.vy = 0
  p.accx = 0.5
  p.jump_power = -3
  p.maxvx = 2
  p.state = p.states.idle
  p.tick = 0
  p.sprite = p.state[1]
  p.flip = false
  p.rejump = true
  p.update = function()
    local ip = input_func()
    animate(p)
    walking_char(p, ip)
    apply_gravity(p, ip)
    jumping_char(p, ip)
    apply_friction(p, ip)
    moving_char(p, ip)
    end
  return p
end

function apply_gravity(thing)
  thing.vy = min(thing.vy + 0.25, 4)
end

function apply_friction(thing)
  local mpoint = mget((thing.x + ((thing.bounds[1] + thing.bounds[2]) / 2) ) / 8, (thing.y + thing.bounds[4] + 1) / 8)
  if mpoint == 0 or thing.vx == 0 then return end
  if fget(mpoint, 1) then
    if thing.vx > 0 then thing.vx -= 0.01 else thing.vx += 0.01 end
  else
    if thing.vx > 0 then thing.vx -= 0.25 else thing.vx += 0.25 end
  end
end

function is_on_suface(thing)
  --if thing.vy < 0 then return false end
  local mpoint1 = mget(((thing.x + thing.bounds[1] + 1 ) / 8), (thing.y + thing.bounds[4] + 1) / 8)
  local mpoint2 = mget(((thing.x + thing.bounds[2] - 1 ) / 8), (thing.y + thing.bounds[4] + 1) / 8)
  --local mpoint = mget((thing.x + ((thing.bounds[1] + thing.bounds[2]) / 2) ) / 8, (thing.y + thing.bounds[4] + 1) / 8)
  if fget(mpoint1, 0) or fget(mpoint2, 0) then return true else return false end
end

function under_surface(thing)
  local mpoint1 = mget(((thing.x + thing.bounds[1] ) / 8), (thing.y + thing.bounds[3] - 1) / 8)
  local mpoint2 = mget(((thing.x + thing.bounds[2] ) / 8), (thing.y + thing.bounds[3] - 1) / 8)
  if fget(mpoint1, 0) or fget(mpoint2, 0) then return true else return false end
end

function side_collide(thing)
  if thing.x < 0 or thing.x > 1024 then return true end
  local mpoint1 = mget(((thing.x + thing.bounds[1] ) / 8), (thing.y + thing.bounds[3]) / 8)
  local mpoint2 = mget(((thing.x + thing.bounds[1] ) / 8), (thing.y + thing.bounds[4] - 1) / 8)
  local mpoint3 = mget(((thing.x + thing.bounds[2] ) / 8), (thing.y + thing.bounds[3]) / 8)
  local mpoint4 = mget(((thing.x + thing.bounds[2] ) / 8), (thing.y + thing.bounds[4] - 1) / 8)
  if fget(mpoint1, 0) or fget(mpoint2, 0) or fget(mpoint3, 0) or fget(mpoint4, 0) then return true else return false end
end

function walking_char(thing, input)
  --if not is_on_suface(thing) and thing.vy > thing.jump_power-1 then return end
  if input.left then
    thing.vx = max(thing.vx - thing.accx, -thing.maxvx)
    thing.flip = true
    if thing.vy == 0 then thing.state = thing.states.walking end
  end
  if input.right then
    thing.flip = false
    thing.vx = min(thing.vx + thing.accx, thing.maxvx)
    if thing.vy == 0 then thing.state = thing.states.walking end
  end
end

function jumping_char(thing, input)
  if input.fire1 then 
    if is_on_suface(thing) then
      thing.vy = thing.jump_power
    end
    if thing.rejump and thing.vy > -0.5 and thing.vy < 0.5 then
      thing.vy = thing.jump_power
      thing.rejump = false
    end
    thing.state = thing.states.jumping
  end
end

function moving_char(thing)
  local c_x = thing.x
  local c_y = thing.y
  thing.x += thing.vx
  thing.y += thing.vy
  if thing.vy >= 0 then
    if is_on_suface(thing) then
      thing.vy = 0
      thing.y = flr(thing.y / 8) * 8
      thing.rejump = true
    end
  else 
    if under_surface(thing) then
      thing.y = c_y
      thing.vy = -(thing.vy / 2)
    end
  end
  if side_collide(thing) then
    thing.x = c_x
    thing.vx = -(thing.vx / 2)
  end
  if abs(thing.vx) < 0.12 then thing.vx = 0 end
  if thing.vx == 0 and thing.vy == 0 then
    thing.state = thing.states.idle
  end
end

function animate(thing)
  thing.tick +=1
  if thing.tick > #thing.state then thing.tick = 1 end
  thing.sprite = thing.state[thing.tick]
end

function draw_thing(t)
  spr(t.sprite, t.x, t.y, t.width, t.height, t.flip)
end

function background_drawer(level)
  local ymax
  local y_clock
  local particles = {}
  function y_offset(pos, max)
    if pos >= max then return  pos - max else return pos end
  end
  function snow(x, y)
    x = x+ cam_x + (sin(clock.v) * 10)
    y = y_offset(y + y_clock, ymax)
    circfill(x, y, 1, 5)
    pset(x, y, 7)
  end
  if level == 1 then
    ymax = 103
    return function()
      local q = flr(rnd(2))
      local row = {}
      for i = 1, q do
        row[i] = {rnd(128), 1 - rnd(2)}
      end
      if #particles == ymax then del(particles, particles[1]) end
      add(particles, row)
      rectfill(0 + cam_x,123 + cam_y, 127 + cam_x, 127 + cam_y, 7)
      rectfill(0 + cam_x,119 + cam_y, 127 + cam_x, 123 + cam_y, 12)
      rectfill(0 + cam_x,120 + cam_y, 127 + cam_x, 120 + cam_y, 7)
      rectfill(0 + cam_x,115 + cam_y, 127 + cam_x, 119 + cam_y, 1)
      rectfill(0 + cam_x,116 + cam_y, 127 + cam_x, 116 + cam_y, 12)
      rectfill(0 + cam_x,113 + cam_y, 127 + cam_x, 113 + cam_y, 1)
      circfill(99 + cam_x, 24, 8, 7)
      --fillp(0b0100000110000010.1)
      fillp(0b0101101001011010.1)
      circfill(99 + cam_x, 24, 6, 6)
      circfill(99 + cam_x, 24, 4, 5)
      fillp()
      circfill(91 + cam_x, 21, 10, 0)
      y_clock = clock.v * ymax
      local l = #particles
      for i = l, 1, -1 do
        for flake in all(particles[i]) do
          flake[1] = flake[1] + flake[2]
          snow(flake[1], l - i)
        end
      end
    end
  end
end

badguys = {
  crab = {
    states = {idle={78, 78, 78, 79, 79, 79}, walking={78, 78, 78, 79, 79, 79}},
    health = 1,
    input=simple_mover_input,
    updaters = {animate, walking_char, apply_gravity, apply_friction, moving_char},
    width = 1,
    height = 1,
    accx = 0.5,
    maxvx = 1.5,
    bounds = {0, 7, 3, 7}
  },
  brb = {
    states = {idle = {94}, walking={94}},
    health =1,
    input = restricted_mover_input,
    updaters = {walking_char, moving_char},
    width = 2,
    height = 1,
    accx = 0.5,
    maxvx = 2,
    bounds = {0, 15, 0, 6}
  }
}

levels = {
  {baddies = {
    {x = 64, y = 64, t = badguys.crab, input = simple_mover_input},
    {x = 134, y = 64, t = badguys.crab, input = simple_mover_input},
    {x = 120, y = 32, t = badguys.brb, input = restricted_mover_input(120, 32, 32)}
    }
  }
}

function start_game()
  penguin = make_penguin(15, 0, 5, player_input)
  baddies = {}
  for b in all(levels[1].baddies) do
    add(baddies, make_baddie(b.x, b.y, b.t, b.input))
  end
  cam_x = 0
  cam_y = 0
  clock = {v = 0, max = 1, inc = 0.01}
  draw_background = background_drawer(1)
end

function update_game()
  penguin.update()
  for b in all(baddies) do
    b.update()
  end
  clock.v += clock.inc
  if clock.v >= clock.max then clock.v = 0 end
end

function focus_camera(thing)
  cam_x = min( max(thing.x - 64 + ((thing.width * 8) / 2), 0), 112 * 8)
  cam_y = max(thing.y - 82, 0)
end

function draw_game()
  cls()
  focus_camera(penguin)
  camera(cam_x,cam_y)
  draw_background()
  map(0, 0, 0, 0, 128, 64)
  draw_thing(penguin)
  foreach(baddies, draw_thing)
  --debug()
end

function debug()
  if is_on_suface(penguin) then print("is on surface!") end
end

function _init()
  start_game()
  _draw = draw_game
  _update = update_game
end

__gfx__
00000000120000000000000012000000000000001200000000051700000000000000000000000000000000000000000000000000000000000000000000000000
00000001111000000000000111100000000000016110000000067500000000000000000000000000000000000000000000000000000000000000000000000000
00000011611000000000001161100000000000111110000000156000000000000000000000000000000000000000000000000000000000000000000000000000
00000011111000000000001111990000000000111149000000155000000000000000000000000000000000000000000000000000000000000000000000000000
00000011149900000000001114940000000000111499000001115500000000000000000000000000000000000000000000000000000000000000000000000000
00000001111000000000000111100000001000011110000001156600000000000000000000000000000000000000000000000000000000000000000000000000
00000011110000000000001111000000001100111100000001556700000000000000000000000000000000000000000000000000000000000000000000000000
00000111110000000000111111000000002111111100000000456540000000000000000000000000000000000000000000000000000000000000000000000000
00001211165000000111121116500000002212111650000000055000000000000000000000000000000000000000000000000000000000000000000000000000
00012211176000000022221117600000000222111760000000566500000000000000000000000000000000000000000000000000000000000000000000000000
001221111770000000120111177000000000011117700000056ff650000000000000000000000000000000000000000000000000000000000000000000000000
001201116770000000000111677000000000011167700000566f7665000000000000000000000000000000000000000000000000000000000000000000000000
0000011167600000000001116760000000000111676000005667f665000000000000000000000000000000000000000000000000000000000000000000000000
00000111160000000000011116000000000001111600000056ff7f65000000000000000000000000000000000000000000000000000000000000000000000000
00000001100000000000000111000000000000011100000005666650000000000000000000000000000000000000000000000000000000000000000000000000
00000049994000000000049910940000000049900094000000555500000000000000000000000000000000000000000000000000000000000000000000000000
00000001200000000000000001200000000100000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000011110000000000000011110000000111000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000116110000000000000116110000000012111001611000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000111110000000000000111110000040111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000111499000000000000111499000090111167611149900000000000000000000000000000000000000000000000000000000000000000000000000000000
00000011110000000000000011110000009111777711111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000011110000000000001111000000001117777611000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000111110000000000011111000000499116775000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001211165000000000121116500000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000
00012211176000000001221117600000000111000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00122111177000000012211117700000011111111001611000000000000000000000000000000000000000000000000000000000000000000000000000000000
00120111677000000012011167700000000022111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000111676000000000011167600000000111167611149900000000000000000000000000000000000000000000000000000000000000000000000000000000
00000111160000000000011116000000499111777711111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000001100000000000000110000000001117777611000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000499094400000000449000940000499116775000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
76777677777777777776767700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
67667767777777776677776700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
667c667677777777c666766600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c666c6c777777776ccc6cc600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000288882002888820
c6ccdccd66666666cdcdcdcc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002878788228878782
dccddcddccccccccdcdddcdc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000008888888888888888
ddd1dd1dddddddddddd1dddd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000008282282882822828
11111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000002020020220200202
c677776c0cccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000155100000000
c677776ccc6666cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015555550067600
c677777cc667766c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005556771760
c677776cc677776c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025222f6666669999
c777776cc677776c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005555f666f5500494
c677776cc677776c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000990555550000000
c677777cc677776c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000
c677776cc677776c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007777777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00776767676766676767770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07767676666666666676777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07676666d666d6d66667677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
767666dddd6ddddddd66767700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77666dd555d55555ddd6676700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
766ddd5555555555555d667700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66dd5555555555555d55d66700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6dd5505055050555555d5d6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d0d555050055505555055dd600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dd50005500500005055055d600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5505000050050500050055dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d5000000500500050505055d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000000000000500005500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001030100000000000000000000000000010100000000000000000000000000000101010000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000414141414141414200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000060614041414141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000415100000000000000510000000000000000000000000000000000000000000000006070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000005000000000004141500000000000000000000000000000000000000000000000607000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4240000000005000000000000000500000000000000000000000000000000000000000606161700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000005040000000000000500000000000000000000000000000000000000060707171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000005000000000004040500000000000000000000000000000000000606170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000041415000000000000000500000000000000000000000000000000060717100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000005000000000000000500000000000000000006061620000606170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4042404240424140414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414100004042
